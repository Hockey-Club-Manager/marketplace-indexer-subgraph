type _Schema_
    @fulltext(
        name: "tokenSearch"
        language: en
        algorithm: rank
        include: [{ entity: "Token", fields: [{ name: "title" }] }]
    )

type Token @entity {
    id: ID!
    title: String!
    media: String!
    reality: Boolean!
    stats: String!
    nationality: String!
    birthday: BigInt!
    number: Int!
    hand: String!
    player_role: String!
    native_position: String!
    player_type: String!
    rarity: String!
    issued_at: BigInt!
    tokenId: String!
    owner: User!
    ownerId: String!
    perpetual_royalties: String!
    marketplace_data: MarketplaceToken @derivedFrom(field: "token")
}

type MarketplaceToken @entity {
    id: ID!
    price: BigInt!
    token: Token!
    isAuction: Boolean!
    offers: [Offer!]!
}

type Offer @entity {
    id: ID!  # token_id + user_id
    price: BigInt!
    user: User!
}

type User @entity {
    id: ID!
    tokens: [String!]
    team: Team
}

type Team @entity {
    id: ID!  # id is user's id
    fives: [Five!]!
    goalies: [Goalie!]!
    goalie_substitutions: [Goalie!]!
}

type Five @entity {
    id: ID! # id is team id + _ + Five number. Example: let45fc.testnet_First, let45fc.testnet_PowerPlay1
    field_players: [PlayerOnPosition!]!
    number: String!
    ice_time_priority: String!
    tactic: String!
}

type PlayerOnPosition @entity {
    id: ID! # id is team id + _ + token_id. Example: let45fc.testnet_token-392874592
    token_id: String!
    position: String!
}

type Goalie @entity {
    id: ID! # id is team id + _ + token_id. Example: let45fc.testnet_token-123328974
    number: String!  # MainGoalkeeper or SubstituteGoalkeeper
    token_id: String!
}
